name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

env:
  FOUNDRY_PROFILE: ci
  ETHEREUM_RPC_URL: ${{ secrets.ETHEREUM_RPC_URL }}
  SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
  OPTIMISM_SEPOLIA_RPC_URL: ${{ secrets.OPTIMISM_SEPOLIA_RPC_URL }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Build contracts
        run: |
          forge --version
          cd evm && FOUNDRY_PROFILE=ir forge build --skip "test/**" --sizes

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run tests
        run: cd evm && forge test

          # coverage:
          #   runs-on: ubuntu-latest
          #   steps:
          #     - uses: actions/checkout@v3

          #     - name: Install Foundry
          #       uses: foundry-rs/foundry-toolchain@v1

          #     - name: Run coverage
          #       run: cd evm && forge coverage --report summary --report lcov

          #     # To ignore coverage for certain directories modify the paths in this step as needed. The
          #     # below default ignores coverage results for the test and script directories. Alternatively,
          #     # to include coverage in all directories, comment out this step. Note that because this
          #     # filtering applies to the lcov file, the summary table generated in the previous step will
          #     # still include all files and directories.
          #     # The `--rc lcov_branch_coverage=1` part keeps branch info in the filtered report, since lcov
          #     # defaults to removing branch info.
          #     - name: Filter directories
          #       run: |
          #         sudo apt update && sudo apt install -y lcov
          #         cd evm && lcov --remove lcov.info 'test/*' 'script/*' --output-file lcov.info --rc lcov_branch_coverage=1

          #     # This step posts a detailed coverage report as a comment and deletes previous comments on
          #     # each push. The below step is used to fail coverage if the specified coverage threshold is
          #     # not met. The below step can post a comment (when it's `github-token` is specified) but it's
          #     # not as useful, and this action cannot fail CI based on a minimum coverage threshold, which
          #     # is why we use both in this way.
          #     - name: Post coverage report
          #       if: github.event_name == 'pull_request' # This action fails when ran outside of a pull request.
          #       uses: romeovs/lcov-reporter-action@v0.3.1
          #       with:
          #         delete-old-comments: true
          #         lcov-file: ./evm/lcov.info
          #         github-token: ${{ secrets.GITHUB_TOKEN }} # Adds a coverage summary comment to the PR.

          #     - name: list files
          #       run: |
          #         ls -la

          #     - name: list files
          #       run: |
          #         cd evm && ls -la

          #     - name: Verify minimum coverage
          #       uses: zgosalvez/github-actions-report-lcov@v2
          #       with:
          #         coverage-files: ./evm/lcov.info
          #         minimum-coverage: 0 # Set coverage threshold.
          #         working-directory: ./evm

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install scopelint
        uses: engineerd/configurator@v0.0.8
        with:
          name: scopelint
          repo: ScopeLift/scopelint
          fromGitHubReleases: true
          version: latest
          pathInArchive: scopelint-x86_64-linux/scopelint
          urlTemplate: https://github.com/ScopeLift/scopelint/releases/download/{{version}}/scopelint-x86_64-linux.tar.xz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check formatting
        run: |
          scopelint --version
          cd evm && scopelint check

  slither-analyze:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v3

      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        id: slither # Required to reference this step in the next step.
        with:
          fail-on: none # Required to avoid failing the CI run regardless of findings.
          sarif: results.sarif
          slither-args: --filter-paths "./lib|./test" --exclude naming-convention,solc-version
