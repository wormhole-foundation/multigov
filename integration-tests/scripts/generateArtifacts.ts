import { execSync } from 'node:child_process';
import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';

const EVM_OUT_DIR = '../evm/out';
const ARTIFACTS_DIR = './artifacts';

console.log('\n🏗️  Starting artifact generation...');

// Create artifacts directory if it doesn't exist
console.log('\n📁 Creating artifacts directory...');
mkdirSync(ARTIFACTS_DIR, { recursive: true });
console.log('✅ Artifacts directory ready');

// Check if out directory exists
if (!existsSync(EVM_OUT_DIR)) {
  console.log('\n🔨 No out directory found, compiling contracts...');
  try {
    console.log('   Running forge build with verbose output...');
    execSync('cd ../evm && forge clean && forge build -vvv --via-ir', {
      stdio: 'inherit',
      timeout: 300000, // 5 minute timeout
    });
    console.log('✅ Compilation successful');
  } catch (error) {
    console.error('❌ Failed to compile contracts:', error);
    process.exit(1);
  }
} else {
  console.log('\n📂 Using existing out directory');
}

const contracts = [
  'HubGovernor',
  'HubMessageDispatcher',
  'HubVotePool',
  'ERC20VotesFake',
  'TimelockController',
  'HubProposalMetadata',
  'HubProposalExtender',
  'HubEvmSpokeAggregateProposer',
  'HubSolanaMessageDispatcher',
  'HubSolanaSpokeVoteDecoder',
  'SpokeMetadataCollector',
  'SpokeVoteAggregator',
  'SpokeMessageExecutor',
  'ERC1967Proxy',
] as const;

console.log('\n📦 Generating bytecode files...');

function generateArtifacts() {
  let successCount = 0;
  let failCount = 0;

  for (const contractName of contracts) {
    const artifactPath = join(
      EVM_OUT_DIR,
      `${contractName}.sol`,
      `${contractName}.json`,
    );
    try {
      console.log(`\n🔍 Processing ${contractName}...`);
      console.log(`   Reading from: ${artifactPath}`);

      const artifact = JSON.parse(readFileSync(artifactPath, 'utf8'));

      const output = `export const ${contractName}Bytecode = '${artifact.bytecode.object}' as const;`;

      const outputPath = join(ARTIFACTS_DIR, `${contractName}.ts`);
      writeFileSync(outputPath, output);
      console.log(`✅ Generated bytecode for ${contractName}`);
      console.log(`   Wrote to: ${outputPath}`);
      successCount++;
    } catch (error) {
      console.error(`❌ Error processing ${contractName}:`, error);
      console.error('   Full error:', error);
      failCount++;
    }
  }

  // Generate index file
  console.log('\n📝 Generating index file...');
  const indexContent = contracts
    .map((name) => `export { ${name}Bytecode } from './${name}';`)
    .join('\n');
  const indexPath = join(ARTIFACTS_DIR, 'index.ts');
  writeFileSync(indexPath, indexContent);
  console.log('✅ Generated index.ts');

  // Print summary
  console.log('\n📊 Generation Summary:');
  console.log(`   ✅ Successfully processed: ${successCount} contracts`);
  if (failCount > 0) {
    console.log(`   ❌ Failed to process: ${failCount} contracts`);
  }
  console.log('\n🎉 Artifact generation complete!\n');
}

generateArtifacts();
